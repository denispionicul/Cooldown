"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[135],{6790:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Returns a new Cooldown.","params":[{"name":"Time","desc":"The time property, for more info check the \\"Time\\" property.","lua_type":"number"}],"returns":[{"desc":"","lua_type":"Cooldown\\r\\n"}],"function_type":"static","errors":[{"lua_type":"\\"No Time\\"","desc":"Happens when no Time property is provided."}],"source":{"line":104,"path":"src/init.lua"}},{"name":"Reset","desc":"Resets the debounce. Just like calling a sucessful :Run() with AutoReset set to true","params":[],"returns":[],"function_type":"method","source":{"line":130,"path":"src/init.lua"}},{"name":"RunIf","desc":"If the given Predicate (The First parameter) is true or returns true, it will call :Run() on itself.\\n\\n\\nAn example would be:\\n```lua\\nlocal Cooldown = require(Path.Cooldown)\\n\\nlocal Debounce = Cooldown.new(5)\\nDebounce.AutoReset = false\\n\\nDebounce:RunIf(true, function()\\n\\tprint(\\"This will run\\")  -- prints\\nend)\\n\\nDebounce:RunIf(false, function()\\n\\tprint(\\"This will not run\\")  -- does not print because the first parameter (Predicate) is false.\\nend)\\n```","params":[],"returns":[],"function_type":"method","errors":[{"lua_type":"\\"No Predicate\\"","desc":"Happens when no Predicate, indicated by a boolean or boolean-returning function is provided."},{"lua_type":"\\"No Callback\\"","desc":"Happens when no callback is provided."}],"source":{"line":167,"path":"src/init.lua"}},{"name":"RunOrElse","desc":"if the :Run() will not be succesful, it will instead call callback2. This won\'t reset the debounce.\\n\\n\\nAn example would be:\\n```lua\\nlocal Cooldown = require(Path.Cooldown)\\n\\nlocal Debounce = Cooldown.new(5)\\n\\nDebounce:RunOrElse(function()\\n\\tprint(\\"This will run\\")  -- prints\\nend, function()\\n\\tprint(\\"This will not print\\") -- doesn\'t print because the :Run() will be successful.\\nend)\\n\\nDebounce:RunOrElse(function()\\n\\tprint(\\"This will not run\\")  -- does not print because the debounce hasn\'t finished waiting.\\nend, function()\\n\\tprint(\\"This will run\\") -- will print because the :Run() failed.\\nend)\\n```","params":[],"returns":[],"function_type":"method","errors":[{"lua_type":"\\"No Callback\\"","desc":"Happens when no Callback is provided."},{"lua_type":"\\"No Callback2\\"","desc":"Happens when no Callback2 is provided."}],"source":{"line":210,"path":"src/init.lua"}},{"name":"Run","desc":"Runs the given callback function if the passed time is higher than the Time property.\\nIf AutoReset is true, it will call :Reset() after a succesful run.","params":[],"returns":[],"function_type":"method","errors":[{"lua_type":"\\"No Callback\\"","desc":"Happens when no callback is provided."}],"source":{"line":226,"path":"src/init.lua"}},{"name":"IsReady","desc":"Returns a boolean indicating if the Cooldown is ready to :Run().","params":[],"returns":[],"function_type":"method","source":{"line":246,"path":"src/init.lua"}},{"name":"Is","desc":"Returns a boolean indicating if the given table is a Cooldown.","params":[{"name":"Table","desc":"","lua_type":"Cooldown?"}],"returns":[{"desc":"","lua_type":"boolean\\r\\n"}],"function_type":"static","source":{"line":253,"path":"src/init.lua"}},{"name":"Destroy","desc":"Destroys the Cooldown.","params":[],"returns":[],"function_type":"method","source":{"line":262,"path":"src/init.lua"}}],"properties":[{"name":"Time","desc":"The time property signifies how much time is needed to wait before using :Run()\\n\\nAn example would be:\\n```lua\\nlocal Cooldown = require(Path.Cooldown)\\n\\nlocal Debounce = Cooldown.new(5) -- The first parameter is the Time\\n-- Can be changed with Debounce.Time = 5\\n\\nDebounce:Run(function()\\n\\tprint(\\"This will run\\")  -- prints\\nend)\\n\\nDebounce:Run(function()\\n\\tprint(\\"This won\'t run\\")  -- won\'t print because the debounce hasn\'t finished waiting 5 seconds\\nend)\\n```\\n\\n:::note\\n\\tCalling :Run() when the debounce isn\'t ready won\'t yield.\\n:::","lua_type":"number","source":{"line":67,"path":"src/init.lua"}},{"name":"AutoReset","desc":"When AutoReset is on, the debounce will reset after a succesful Run() call.\\n\\nAn example would be:\\n```lua\\nlocal Cooldown = require(Path.Cooldown)\\n\\nlocal Debounce = Cooldown.new(5)\\nDebounce.AutoReset = false\\n\\nDebounce:Run(function()\\n\\tprint(\\"This will run\\")  -- prints\\nend)\\n\\nDebounce:Run(function()\\n\\tprint(\\"This will still run\\")  -- still prints because AutoReset is false and the debounce did not reset\\nend)\\n\\nDebounce:Reset() -- Reset the debounce\\n```","lua_type":"boolean","source":{"line":91,"path":"src/init.lua"}}],"types":[{"name":"Cooldown","desc":"","fields":[{"name":"Time","lua_type":"number","desc":"The time of the debounce"},{"name":"LastActivation","lua_type":"number","desc":"The last time the debounce reset"},{"name":"AutoReset","lua_type":"boolean","desc":"Whether or not the debounce should reset after running."},{"name":"OnReady","lua_type":"RBXScriptSignal | Signal","desc":"Fires whenever the Cooldown can be be fired."}],"source":{"line":41,"path":"src/init.lua"}}],"name":"Cooldown","desc":"Countdown is a Debounce utility which is meant to make it easier to create Debounce easily, with minimal effort.\\nBasic Usage:\\n```lua\\nlocal Cooldown = require(Path.Cooldown)\\n\\nlocal DebounceTime = 5\\nlocal Debounce = Cooldown.new(DebounceTime)\\n```","source":{"line":21,"path":"src/init.lua"}}')}}]);