[{"title":"Cooldown","type":0,"sectionRef":"#","url":"/Cooldown/api/Cooldown","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#types","content":" "},{"title":"Cooldown​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#Cooldown","content":"&lt;/&gt; interface Cooldown { Time: number-- The time of the debounce LastActivation: number-- The last time the debounce reset AutoReset: boolean-- Whether or not the debounce should reset after running. OnReady: RBXScriptSignal | Signal-- Fires whenever the Cooldown can be be fired. }  "},{"title":"Properties​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#properties","content":" "},{"title":"Time​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#Time","content":"&lt;/&gt; Cooldown.Time: number The time property signifies how much time is needed to wait before using :Run() An example would be: local Cooldown = require(Path.Cooldown) local Debounce = Cooldown.new(5) -- The first parameter is the Time -- Can be changed with Debounce.Time = 5 Debounce:Run(function() print(&quot;This will run&quot;) -- prints end) Debounce:Run(function() print(&quot;This won't run&quot;) -- won't print because the debounce hasn't finished waiting 5 seconds end) note Calling :Run() when the debounce isn't ready won't yield.   "},{"title":"AutoReset​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#AutoReset","content":"&lt;/&gt; Cooldown.AutoReset: boolean When AutoReset is on, the debounce will reset after a succesful Run() call. An example would be: local Cooldown = require(Path.Cooldown) local Debounce = Cooldown.new(5) Debounce.AutoReset = false Debounce:Run(function() print(&quot;This will run&quot;) -- prints end) Debounce:Run(function() print(&quot;This will still run&quot;) -- still prints because AutoReset is false and the debounce did not reset end) Debounce:Reset() -- Reset the debounce  "},{"title":"Functions​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#new","content":"&lt;/&gt; Cooldown.new( Time: number-- The time property, for more info check the &quot;Time&quot; property. ) → Cooldown Returns a new Cooldown. "},{"title":"Errors","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown##","content":"Type\tDescription&quot;No Time&quot;\tHappens when no Time property is provided.  "},{"title":"Is​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#Is","content":"&lt;/&gt; Cooldown.Is(Table: Cooldown?) → boolean Returns a boolean indicating if the given table is a Cooldown.  "},{"title":"Reset​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#Reset","content":"&lt;/&gt; Cooldown:Reset() → () Resets the debounce. Just like calling a sucessful :Run() with AutoReset set to true  "},{"title":"RunIf​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#RunIf","content":"&lt;/&gt; Cooldown:RunIf() → () If the given Predicate (The First parameter) is true or returns true, it will call :Run() on itself. An example would be: local Cooldown = require(Path.Cooldown) local Debounce = Cooldown.new(5) Debounce.AutoReset = false Debounce:RunIf(true, function() print(&quot;This will run&quot;) -- prints end) Debounce:RunIf(false, function() print(&quot;This will not run&quot;) -- does not print because the first parameter (Predicate) is false. end)  "},{"title":"Errors","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown##","content":"Type\tDescription&quot;No Predicate&quot;\tHappens when no Predicate, indicated by a boolean or boolean-returning function is provided. &quot;No Callback&quot;\tHappens when no callback is provided.  "},{"title":"RunOrElse​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#RunOrElse","content":"&lt;/&gt; Cooldown:RunOrElse() → () if the :Run() will not be succesful, it will instead call callback2. This won't reset the debounce. An example would be: local Cooldown = require(Path.Cooldown) local Debounce = Cooldown.new(5) Debounce:RunOrElse(function() print(&quot;This will run&quot;) -- prints end, function() print(&quot;This will not print&quot;) -- doesn't print because the :Run() will be successful. end) Debounce:RunOrElse(function() print(&quot;This will not run&quot;) -- does not print because the debounce hasn't finished waiting. end, function() print(&quot;This will run&quot;) -- will print because the :Run() failed. end)  "},{"title":"Errors","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown##","content":"Type\tDescription&quot;No Callback&quot;\tHappens when no Callback is provided. &quot;No Callback2&quot;\tHappens when no Callback2 is provided.  "},{"title":"Run​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#Run","content":"&lt;/&gt; Cooldown:Run() → () Runs the given callback function if the passed time is higher than the Time property. If AutoReset is true, it will call :Reset() after a succesful run. "},{"title":"Errors","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown##","content":"Type\tDescription&quot;No Callback&quot;\tHappens when no callback is provided.  "},{"title":"IsReady​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#IsReady","content":"&lt;/&gt; Cooldown:IsReady() → () Returns a boolean indicating if the Cooldown is ready to :Run().  "},{"title":"Destroy​","type":1,"pageTitle":"Cooldown","url":"/Cooldown/api/Cooldown#Destroy","content":"&lt;/&gt; Cooldown:Destroy() → () Destroys the Cooldown. "}]